From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Paul <paul@technove.co>
Date: Sat, 3 Jul 2021 12:49:54 -0500
Subject: [PATCH] Regionized notify


diff --git a/src/main/java/gg/airplane/structs/NavigatingMobMap.java b/src/main/java/gg/airplane/structs/NavigatingMobMap.java
new file mode 100644
index 0000000000000000000000000000000000000000..6dc9cba47950165eca2d362bc10cbfbb1b0a2ecb
--- /dev/null
+++ b/src/main/java/gg/airplane/structs/NavigatingMobMap.java
@@ -0,0 +1,13 @@
+package gg.airplane.structs;
+
+import com.destroystokyo.paper.util.misc.AreaMap;
+import com.destroystokyo.paper.util.misc.PooledLinkedHashSets;
+import net.minecraft.world.entity.Mob;
+
+public class NavigatingMobMap extends AreaMap<Mob> {
+
+    @Override
+    protected PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<Mob> getEmptySetFor(Mob object) {
+        return object.cachedSingleHashSet;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 7f11b84fc566b88e0aae0b015237a7f5786fbeeb..60c4bcdbc20f4b4198f49cd43b98ebd557c99692 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -1651,11 +1651,20 @@ public class ServerLevel extends net.minecraft.world.level.Level implements Worl
         VoxelShape voxelshape1 = newState.getCollisionShape(this, pos);
 
         if (Shapes.joinIsNotEmpty(voxelshape, voxelshape1, BooleanOp.NOT_SAME)) {
-            Iterator iterator = this.navigatingMobs.iterator();
+            // Airplane start - use area map for notifying
+            com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<Mob> mobs =
+                    this.entityManager.navigatingMobMap.getObjectsInRange(ChunkPos.asLong(pos));
+            if (mobs == null) return;
 
-            while (iterator.hasNext()) {
+            Object[] mobSet = mobs.getBackingSet();
+
+            for (int i = 0; i < mobSet.length; i++) {
+                Object raw = mobSet[i];
+                if (raw == null) continue;
                 // CraftBukkit start - fix SPIGOT-6362
-                Mob entityinsentient;
+                Mob entityinsentient = (Mob) raw;
+                // Airplane - remove the try/catch as it's unnecessary with the array
+                /*
                 try {
                     entityinsentient = (Mob) iterator.next();
                 } catch (java.util.ConcurrentModificationException ex) {
@@ -1665,6 +1674,7 @@ public class ServerLevel extends net.minecraft.world.level.Level implements Worl
                     this.sendBlockUpdated(pos, oldState, newState, flags);
                     return;
                 }
+                 */
                 // CraftBukkit end
                 PathNavigation navigationabstract = entityinsentient.getNavigation();
 
@@ -1672,6 +1682,7 @@ public class ServerLevel extends net.minecraft.world.level.Level implements Worl
                     navigationabstract.recomputePath(pos);
                 }
             }
+            // Airplane end
 
         }
         } // Paper
@@ -2468,7 +2479,7 @@ public class ServerLevel extends net.minecraft.world.level.Level implements Worl
             }
 
             if (entity instanceof Mob) {
-                ServerLevel.this.navigatingMobs.add((Mob) entity);
+                //ServerLevel.this.navigatingMobs.add((Mob) entity); // Airplane - this is now unused
             }
 
             if (entity instanceof EnderDragon) {
@@ -2538,7 +2549,7 @@ public class ServerLevel extends net.minecraft.world.level.Level implements Worl
             }
 
             if (entity instanceof Mob) {
-                ServerLevel.this.navigatingMobs.remove(entity);
+                //ServerLevel.this.navigatingMobs.remove(entity); // Airplane - this is now unused
             }
 
             if (entity instanceof EnderDragon) {
diff --git a/src/main/java/net/minecraft/world/entity/Mob.java b/src/main/java/net/minecraft/world/entity/Mob.java
index 4e5344288db1f75e3d01a38378da9ffd5ecfd727..52cd9af01695989659eafa56c7dd684e5d861fa3 100644
--- a/src/main/java/net/minecraft/world/entity/Mob.java
+++ b/src/main/java/net/minecraft/world/entity/Mob.java
@@ -126,6 +126,9 @@ public abstract class Mob extends LivingEntity {
     private float restrictRadius;
 
     public int ticksSinceLastInteraction; // Purpur
+
+    public final com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<Mob> cachedSingleHashSet; // Airplane
+
     public boolean aware = true; // CraftBukkit
 
     protected Mob(EntityType<? extends Mob> type, Level world) {
@@ -156,6 +159,8 @@ public abstract class Mob extends LivingEntity {
         // CraftBukkit start - default persistance to type's persistance value
         this.persistenceRequired = !this.removeWhenFarAway(0);
         // CraftBukkit end
+
+        this.cachedSingleHashSet = new com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<>(this); // Airplane
     }
 
     protected void registerGoals() {}
diff --git a/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java b/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
index a99d0a00bbdb90588b87a3f85c62bdc1468b5e5a..2685325a465f700d3df4b16ae0b141e83966c95f 100644
--- a/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
+++ b/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
@@ -25,6 +25,7 @@ import net.minecraft.server.level.ChunkHolder;
 import net.minecraft.util.CsvOutput;
 import net.minecraft.util.VisibleForDebug;
 import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.Mob;
 import net.minecraft.world.level.ChunkPos;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -42,6 +43,7 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
     private final LongSet chunksToUnload = new LongOpenHashSet();
     private final Queue<ChunkEntities<T>> loadingInbox = Queues.newConcurrentLinkedQueue();
     public final com.tuinity.tuinity.world.EntitySliceManager entitySliceManager; // Tuinity
+    public final gg.airplane.structs.NavigatingMobMap navigatingMobMap = new gg.airplane.structs.NavigatingMobMap(); // Airplane
 
     public PersistentEntitySectionManager(Class<T> entityClass, LevelCallback<T> handler, EntityPersistentStorage<T> dataAccess, com.tuinity.tuinity.world.EntitySliceManager entitySliceManager) { // Tuinity
         this.entitySliceManager = entitySliceManager; // Tuinity
@@ -96,6 +98,12 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
             EntitySection<T> entitySection = this.sectionStorage.getOrCreateSection(l);
             entitySection.add(entity);
             this.entitySliceManager.addEntity((Entity)entity); // Tuinity
+            // Airplane start
+            if (entity instanceof net.minecraft.world.entity.Mob mob) {
+                net.minecraft.world.level.ChunkPos chunkPos = mob.chunkPosition();
+                this.navigatingMobMap.add(mob, chunkPos.x, chunkPos.z, (int) mob.getAttributeValue(net.minecraft.world.entity.ai.attributes.Attributes.FOLLOW_RANGE) + 1);
+            }
+            // Airplane end
             entity.setLevelCallback(new PersistentEntitySectionManager.Callback(entity, l, entitySection));
             if (!existing) {
                 this.callbacks.onCreated(entity);
@@ -375,11 +383,13 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
         private final T entity;
         private long currentSectionKey;
         private EntitySection<T> currentSection;
+        private final int viewDistance; // Airplane
 
         Callback(T entityAccess, long l, EntitySection<T> entitySection) {
             this.entity = entityAccess;
             this.currentSectionKey = l;
             this.currentSection = entitySection;
+            this.viewDistance = (entityAccess instanceof net.minecraft.world.entity.Mob mob) ? (int) mob.getAttributeValue(net.minecraft.world.entity.ai.attributes.Attributes.FOLLOW_RANGE) + 1 : 0; // Airplane
         }
 
         @Override
@@ -388,6 +398,12 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
             long l = SectionPos.asLong(blockPos);
             if (l != this.currentSectionKey) {
                 PersistentEntitySectionManager.this.entitySliceManager.moveEntity((Entity)this.entity); // Tuinity
+                // Airplane start
+                if (this.entity instanceof net.minecraft.world.entity.Mob mob) {
+                    net.minecraft.world.level.ChunkPos chunkPos = mob.chunkPosition();
+                    PersistentEntitySectionManager.this.navigatingMobMap.update(mob, chunkPos.x, chunkPos.z, this.viewDistance);
+                }
+                // Airplane end
                 Visibility visibility = this.currentSection.getStatus();
                 if (!this.currentSection.remove(this.entity)) {
                     PersistentEntitySectionManager.LOGGER.warn("Entity {} wasn't found in section {} (moving to {})", this.entity, SectionPos.of(this.currentSectionKey), l);
@@ -432,6 +448,7 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
                 PersistentEntitySectionManager.LOGGER.warn("Entity {} wasn't found in section {} (destroying due to {})", this.entity, SectionPos.of(this.currentSectionKey), reason);
             }
             PersistentEntitySectionManager.this.entitySliceManager.removeEntity((Entity)this.entity); // Tuinity
+            if (this.entity instanceof net.minecraft.world.entity.Mob mob) PersistentEntitySectionManager.this.navigatingMobMap.remove(mob); // Airplane
 
             Visibility visibility = PersistentEntitySectionManager.getEffectiveStatus(this.entity, this.currentSection.getStatus());
             if (visibility.isTicking()) {
